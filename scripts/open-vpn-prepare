#!/bin/bash

# Скрипт для подготовки к установке OpenVPNToggler

#
# Константы
#

# @brief    Версия скрипта
readonly COMMON_VERSION="1.0.0"
# @brief    Название скрипта
readonly COMMON_SCRIPT_FILE="$(basename "$0")"
# @brief    Путь к скрипту
readonly COMMON_SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
# @brief    Путь до директори OpenVPNToggler
readonly COMMON_DIR="/home/$SUDO_USER/.config/OpenVPNToggler/"
# @brief    Путь к лог файлу
readonly COMMON_LOG_FILE="$COMMON_DIR/$COMMON_SCRIPT_FILE.log"

# @brief    Список дистрибутивов
readonly COMMON_DISTS=("bullseye"
                       "bookworm"
                       "focal"
                       "jammy"
                       "noble"
                       "plucky")

# @brief    Код успешного выполнения операции
readonly ALL_OK=0
# @brief    Код неуспешного выполнения операции
readonly NOT_OK=1

#
# Функции
#

# @brief    Основная функция
# @details  Данная функция выполняет вызов prepare и addOpenVPNToApt
# @return   Возвращает ALL_OK в случае успешного выполнения всех действий.
#               В противном случае, возвращает NOT_OK
function main ()
{
    if ! prepare
    then
        return $NOT_OK
    fi

    if ! addOpenVPNToApt
    then
        return $NOT_OK
    fi

    echo "Подготовка к установке OpenVPNToggler завершена!"

    return $ALL_OK
}

# @brief    Функция подготовки к работе
# @details  Данная функция выполняет проверку на запуск от пользователя root, 
#               инициализирует COMMON_LOG_FILE и устанавливает зависимости
# @return   Возвращает ALL_OK в случае успешной подготовки к работе.
#               В противном случае, возвращет NOT_OK
function prepare ()
{
    echo "Подготовка рабочего окружения..."

    if [ "$USER" != "root" ]
    then
        echo "Запустите скрипт при помощи sudo!"
        return $NOT_OK
    fi

    if ! sudo -u "$SUDO_USER" mkdir -p "$COMMON_DIR" >> /dev/null 2>&1
    then
        echo "Не удалось создать директорию $COMMON_DIR!"
        return $NOT_OK
    fi

    if ! truncate -s 0 "$COMMON_LOG_FILE" >> /dev/null 2>&1
    then
        echo "Не удалось создать лог файл $COMMON_LOG_FILE!"
        return $NOT_OK
    fi

    if ! [ -w "$COMMON_LOG_FILE" ]
    then
        echo "Лог файл $COMMON_LOG_FILE закрыт для записи!"
        return $NOT_OK
    fi
    
    if ! apt update >> "$COMMON_LOG_FILE" 2>&1
    then
        echo "Не удалось обновить список пакетов!"
        echo "Подробности:"
        echo "cat $COMMON_LOG_FILE"
        return $NOT_OK
    fi

    local PACKAGES=(apt-transport-https 
                    curl)
    local PACKAGE=""
   
    for PACKAGE in "${PACKAGES[@]}"
    do
        echo -n "Проверка наличия зависимости $PACKAGE... "
        if ! packageIsInstalled "$PACKAGE"
        then
            echo "Пакет не установлен!"
            echo -n "Установка пакета $PACKAGE... "
            if ! packageInstall "$PACKAGE"
            then
                echo "Ошибка!"
                echo "Подробности в $COMMON_LOG_FILE"
                return $NOT_OK
            fi
            echo "Выполнено!"
        fi
        echo "Пакет установлен!"
    done

    echo "Рабочее окружение подготовлено!"

    return $ALL_OK
}

# @brief    Функция добавления пакетов OpenVPN в apt
# @details  Данная функция выполняет получение дистрибутива,
#               затем добавляет пакеты OpenVPN в apt и 
#               обновляет список пакетов apt
# @return   Возвращает ALL_OK в случае успешного выполнения операции.
#               В противном случае, возвращает NOT_OK
function addOpenVPNToApt ()
{
    local DISTRO=""
    
    echo -n "Определение дистрибутива... "
    
    DISTRO="$(grep -h -r "VERSION_CODENAME" /etc/*release | cut -d '=' -f2)"    
    if [ -z "$DISTRO" ]
    then
        echo "Ошибка!"
        echo "Подробности:"
        echo "cat $COMMON_LOG_FILE"
        return $NOT_OK
    fi

    local DIST=""
    local IS_FOUND=$NOT_OK

    for DIST in "${COMMON_DISTS[@]}"
    do
        if [ "$DISTRO" == "$DIST" ]
        then
            IS_FOUND=$ALL_OK
        fi
    done
    
    if [ $IS_FOUND != $ALL_OK ]
    then
        echo "Дистрибутив $DISTRO не поддерживается!"
        return $NOT_OK
    fi

    echo "Выполнено!"
    
    echo -n "Добавление пакетов OpenVPN для $DISTRO... "

    if ! mkdir -p /etc/apt/keyrings >> "$COMMON_LOG_FILE" 2>&1
    then
        echo "Ошибка!"
        echo "Подробности:"
        echo "cat $COMMON_LOG_FILE"
        return $NOT_OK
    fi

    if ! curl -sSfL https://packages.openvpn.net/packages-repo.gpg > /etc/apt/keyrings/openvpn.asc 2> "$COMMON_LOG_FILE"
    then
        echo "Ошибка!"
        echo "Подробности:"
        echo "cat $COMMON_LOG_FILE"
        return $NOT_OK
    fi
    
    local OPENVPN_REPO="deb [signed-by=/etc/apt/keyrings/openvpn.asc] https://packages.openvpn.net/openvpn3/debian $DISTRO main"

    if ! mkdir -p /etc/apt/sources.list.d >> "$COMMON_LOG_FILE" 2>&1
    then
        echo "Ошибка!"
        echo "Подробности:"
        echo "cat $COMMON_LOG_FILE"
        return $NOT_OK
    fi

    if [ ! -f /etc/apt/sources.list.d/openvpn3.list ] ||
        ! grep -qF "$OPENVPN_REPO" /etc/apt/sources.list.d/openvpn3.list
    then
        if ! echo "$OPENVPN_REPO" >> /etc/apt/sources.list.d/openvpn3.list 2> "$COMMON_LOG_FILE"
        then
            echo "Ошибка!"
            echo "Подробности:"
            echo "cat $COMMON_LOG_FILE"
            return $NOT_OK
        fi
    fi

    if ! apt update >> "$COMMON_LOG_FILE" 2>&1
    then
        echo "Не удалось обновить список пакетов!"
        echo "Подробности:"
        echo "cat $COMMON_LOG_FILE"
        return $NOT_OK
    fi

    echo "Выполнено!"

    local PACKAGES=(openvpn3
                    openvpn-systemd-resolved)
    local PACKAGE=""
   
    for PACKAGE in "${PACKAGES[@]}"
    do
        echo -n "Установка пакета $PACKAGE... "
        if ! packageInstall "$PACKAGE"
        then
            echo "Ошибка!"
            echo "Подробности:"
            echo "cat $COMMON_LOG_FILE"
            return $NOT_OK
        fi
        echo "Выполнено!"
    done

    return $ALL_OK
}

# @brief    Функция проверки системы на наличие пакета
# @details  Данная функция проверяет, установлен ли пакет в системе
# @param    PACKAGE Название пакета
# @return   Возвращает ALL_OK в случае если пакет установлен.
#               В противном случае возвращает NOT_OK
function packageIsInstalled ()
{
    local PACKAGE="$1"

    if [ -z "$PACKAGE" ]
    then
        echo "Название пакета не указано!"
        return $NOT_OK
    fi

    local RESULT=""

    RESULT=$(dpkg-query -W --showformat='${Status}\n' "$PACKAGE" 2> "$COMMON_LOG_FILE" | grep "install ok installed")
    if [ -z "$RESULT" ]
    then
        return $NOT_OK
    fi

    return $ALL_OK
}

# @brief    Функция установки пакета
# @details  Данная функция выполняет установку пакета PACKAGE
# @param    PACKAGE Название пакета или путь к нему
# @return   Возвращает ALL_OK в случае успешной установки пакета.
#               В противном случае возвращает NOT_OK
function packageInstall ()
{
    local PACKAGE="$1"

    if [ -z "$PACKAGE" ]
    then
        echo "Название пакета не указано!"
        return $NOT_OK
    fi

    if [[ "$PACKAGE" == *"/"* ]] && ! [ -f "$PACKAGE" ]
    then
        echo "Невозможно установить пакет $PACKAGE!" 
        echo "Причина: файл отсутствует"
        return $NOT_OK
    fi

    if [[ "$PACKAGE" == *"/"* ]] && ! [ -x "$PACKAGE" ]
    then
        echo "Невозможно установить пакет $PACKAGE!" 
        echo "Причина: отсутствует флаг запуска"
        return $NOT_OK
    fi

    if ! apt install -y --no-install-recommends "$PACKAGE" >> "$COMMON_LOG_FILE" 2>&1
    then
        echo "Не удалось установить пакет $PACKAGE!"
        echo "Подробности:"
        echo "cat $COMMON_LOG_FILE"
        return $NOT_OK
    fi

    return $ALL_OK
}

#
# Точка входа в скрипт
#

main "$1"
exit $?

